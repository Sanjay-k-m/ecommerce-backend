// --------------------
// Datasource & Generator
// --------------------
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------
// Enums
// --------------------
enum UserStatus {
  active
  suspended
  deleted
}

enum RoleName {
  user
  admin
}

enum CategoryStatus {
  active
  inactive
  deleted
}

enum ProductStatus {
  active
  inactive
  deleted
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum CouponStatus {
  active
  expired
  used
}

enum ReviewStatus {
  pending
  approved
  rejected
}

enum ShippingStatus {
  pending
  shipped
  delivered
  cancelled
}

// --------------------
// User & Auth
// --------------------
model Role {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      RoleName    @unique
  userRoles UserRole[]  @relation("UserRoles")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
}

model User {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName                 String?
  lastName                  String?
  dob                       DateTime?
  email                     String      @unique
  username                  String?     @unique
  password                  String
  userRoles                 UserRole[]  @relation("UserRoles")
  phone                     String?
  isEmailVerified           Boolean     @default(false)
  currentHashedRefreshToken String?
  passwordResetToken        String?
  passwordResetExpires      DateTime?
  otp                       String?
  otpExpiry                 DateTime?
  lastLogin                 DateTime?
  failedLoginAttempts       Int         @default(0)
  status                    UserStatus  @default(active)
  lastPasswordChange        DateTime?
  twoFactorEnabled          Boolean     @default(false)
  twoFactorSecret           String?
  socialProvider            String?
  socialId                  String?
  loginIp                   String?
  loginUserAgent            String?
  previousPasswords         Json?       @default("[]")
  securityQuestions         Json?       @default("[]")
  mfaRecoveryCodes          Json?       @default("[]")
  
  addresses                 Address[]
  cart                      Cart[]
  orders                    Order[]
  wishlist                  Wishlist[]
  reviews                   Review[]
  notifications             Notification[]
  media                     Media[]
  
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  deletedAt                 DateTime?
}

model UserRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  roleId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserRoles")
  role      Role     @relation(fields: [roleId], references: [id], name: "UserRoles")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([roleId])
  @@unique([userId, roleId])
}

// --------------------
// Address
// --------------------
model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  street     String
  city       String
  state      String
  country    String
  zipCode    String
  shipping   Shipping[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

// --------------------
// Categories & Subcategories
// --------------------
model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  description   String?
  subcategories Subcategory[]
  products      Product[]     @relation("CategoryProducts")
  status        CategoryStatus @default(active)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
}

model Subcategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  products    Product[] @relation("SubcategoryProducts")
  status      CategoryStatus @default(active)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

// --------------------
// Products & Inventory
// --------------------
model Product {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  price         Float
  quantity      Int
  categoryId    String       @db.ObjectId
  category      Category     @relation(fields: [categoryId], references: [id], name: "CategoryProducts")
  subcategoryId String?      @db.ObjectId
  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id], name: "SubcategoryProducts")
  status        ProductStatus @default(active)
  media         Media[]
  reviews       Review[]
  cartItems     Cart[]
  orderItems    OrderItem[]
  coupons       Coupon[]
  wishlist      Wishlist[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
}

// --------------------
// Cart & Wishlist
// --------------------
model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------------
// Orders, Payments & Shipping
// --------------------
model Order {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id])
  items      OrderItem[]
  total      Float
  status     OrderStatus  @default(pending)
  payment    Payment?
  shipping   Shipping?
  returns    Return[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String       @unique @db.ObjectId
  order      Order        @relation(fields: [orderId], references: [id])
  amount     Float
  method     String
  status     PaymentStatus @default(pending)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Shipping {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String        @unique @db.ObjectId
  order      Order         @relation(fields: [orderId], references: [id])
  addressId  String        @db.ObjectId
  address    Address       @relation(fields: [addressId], references: [id])
  carrier    String
  trackingNo String?
  status     ShippingStatus @default(pending)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

// --------------------
// Coupons
// --------------------
model Coupon {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  code      String       @unique
  discount  Float
  productId String       @db.ObjectId
  product   Product      @relation(fields: [productId], references: [id])
  status    CouponStatus @default(active)
  expiresAt DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// --------------------
// Reviews & Returns
// --------------------
model Review {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  productId String       @db.ObjectId
  product   Product      @relation(fields: [productId], references: [id])
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  status    ReviewStatus @default(pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
}

model Return {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  reason    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------------
// Media & Notifications
// --------------------
model Media {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  type      String
  productId String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------------
// Analytics & Settings
// --------------------
model Analytics {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}